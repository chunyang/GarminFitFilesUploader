#!/usr/bin/env ruby
# syncruns.rb
#
# Backup .FIT files from Garmin watch and upload to Garmin Connect

require 'digest'
require 'io/console'
require 'json'
require 'mechanize'

#
# Configuration
#

# Place to mount watch, specify mount options in /etc/fstab
WATCH_MOUNT = '/mnt/fr10'

# Directory on computer to store (backup) .FIT files
FIT_DIR = '/home/cyang/etc/runs'

# Garmin Connect URLs
SIGNIN_URL='https://connect.garmin.com/signin'
UPLOAD_URL='http://connect.garmin.com/api/upload/widget/manualUpload.faces?uploadServiceVersion=1.1'

#
# Code
#

def upload(*files)
  # Prompt user for credentials
  print "Garmin username: "
  username = STDIN.gets.chomp

  print "Garmin password: "
  password = STDIN.noecho(&:gets).chomp
  puts

  agent = Mechanize.new { |a| a.follow_meta_refresh = true }

  # Sign into Garmin Connect
  agent.get(SIGNIN_URL) do |signin|
    home = signin.form_with(:name => 'login') do |form|
      form['login:loginUsernameField'] = username
      form['login:password'] = password
    end.submit

    files.each do |fit_file|
      print "Processing #{fit_file} ... "

      if not File.exist? fit_file
        STDERR.puts "Cannot find #{fit_file}, skipping."
        next
      end

      agent.transact do
        # Upload a single fit file
        agent.get(UPLOAD_URL) do |upload|
          response = upload.form_with(:id => 'uploadForm') do |form|
            # they do some "fancy" javascript stuff to ensure the uploaded file
            # is valid (not too big, correct file format etc.) but in the end
            # they just POST it to to the URL below :-)
            form.action = '/proxy/upload-service-1.1/json/upload/.fit'
            form.file_uploads.first.file_name = fit_file
          end.submit

          res_hash = JSON.parse(response.body)
          failures = res_hash['detailedImportResult']['failures']

          if failures.length > 0
            failures.each do |failure|
              STDERR.print "Error: "
              STDERR.puts(failure['messages'].map { |m| m['content'] }.join(", "))
            end
          else
            puts 'Success.'
          end
        end
      end
    end
  end
end

# Mount watch
print "Mounting watch ... "
system('mount', WATCH_MOUNT) || exit(1)
puts "done."

begin
  # Copy runs to computer
  existing_files = Hash[Dir.glob(File.join(FIT_DIR, '*')).map do |fn|
    [Digest::MD5.file(fn).hexdigest, fn]
  end]

  new_files = Dir.glob(File.join(WATCH_MOUNT, 'GARMIN', 'ACTIVITY', '*')).map do |fn|
    [Digest::MD5.file(fn).hexdigest, fn]
  end.select { |h, fn| !existing_files.include? h }.map &:last

  if new_files.length.zero?
    puts 'No new .FIT files found.'
    exit 0
  end

  puts 'Found new .FIT files:'
  new_files.each do |fn|
    puts "#{fn}\t#{File.ctime(fn).strftime('%c')}"
  end

  print "Copying new .FIT files to #{FIT_DIR} ... "
  FileUtils.cp(new_files, FIT_DIR, preserve: true)
  puts 'done.'

  print 'Uploading files to Garmin Connect ... '
  upload(*new_files)
ensure
  # Unmount watch
  print "Unmounting watch ... "
  system('umount', WATCH_MOUNT)
  puts "done."
end
